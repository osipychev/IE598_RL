#!/bin/bash
#PBS -l nodes=4:ppn=16:xk
#PBS -l walltime=12:00:00
#PBS -N project
#PBS -e $PBS_JOBID.err
#PBS -o $PBS_JOBID.out
#PBS -m bea
#PBS -M yfang10@illinois.edu

# If you launched the job in a directory prepared for the job to run within,
# you'll want to cd to that directory
# [uncomment the following line to enable this]
# cd $PBS_O_WORKDIR
# Alternatively, the job script can create its own job-ID-unique directory
# to run within.  In that case you'll need to create and populate that
# directory with executables and perhaps inputs
# [uncomment and customize the following lines to enable this behavior]
# mkdir -p /scratch/sciteam/$USER/$PBS_JOBID
# cd /scratch/sciteam/$USER/$PBS_JOBID
# cp /scratch/test/* .
cd ~/scratch/project

# To add certain modules that you do not have added via ~/.modules
. /opt/modules/default/init/bash # NEEDED to add module commands to shell
module swap PrgEnv-cray PrgEnv-gnu 
module load bwpy 
module load bwpy-mpi
module load tensorflow 
module load cudatoolkit 
#module add ccm  
#module load zlib
 
export CPATH="${BWPY_INCLUDE_PATH}"
export LIBRARY_PATH="${BWPY_LIBRARY_PATH}"
export PMI_NO_FORK=1
export PMI_NO_PREINITIALIZE=1
# export APRUN_XFER_LIMITS=1  # to transfer shell limits to the executable
### launch the application
### redirecting stdin and stdout if needed
### NOTE: (the "in" file must exist for input)
#aprun -n 1 -N 1 train.sh

aprun -n 4 -d 16 -cc none python3.4 GA3C.py >& $PBS_JOBID.log
### For more information see the man page for aprun

